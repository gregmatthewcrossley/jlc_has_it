[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "jlc-has-it"
version = "0.1.0"
description = "Local MCP server for conversational component search in KiCad with JLCPCB"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Greg Crossley", email = "noreply@example.com"}
]
keywords = ["kicad", "jlcpcb", "electronics", "pcb", "components", "mcp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "requests>=2.31.0",
    "pydantic>=2.0.0",
    "mcp>=0.1.0",
    "kiutils>=0.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-mock>=3.11.1",
    "pytest-asyncio>=0.21.1",
    "pytest-vcr>=1.0.2",
    "black>=23.7.0",
    "ruff>=0.0.285",
    "mypy>=1.5.0",
]
cli = [
    "typer>=0.9.0",
    "rich>=13.5.0",
]

[project.scripts]
jlc-has-it-mcp = "jlc_has_it.mcp.__main__:run"
jlc-has-it = "jlc_has_it.cli.main:app"

[project.urls]
Homepage = "https://github.com/gcrossley/jlc_has_it"
Repository = "https://github.com/gcrossley/jlc_has_it"

[tool.setuptools]
packages = ["jlc_has_it", "jlc_has_it.core", "jlc_has_it.core.kicad", "jlc_has_it.mcp", "jlc_has_it.cli"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # function calls in argument defaults (intentional for Typer)
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v -ra --tb=short"
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
]
